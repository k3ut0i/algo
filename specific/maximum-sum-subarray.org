* Maximum Sum Subarray problem
https://en.wikipedia.org/wiki/Maximum_subarray_problem

_STATEMENT_ :: Given an array of numbers(integers?) find a contiguous subarray which has the largest sum.
So we have to find two indices i, j with 1 <= i <= j <= n such that SUM {a[k] | i <= k <= j} is maximum. A brute force search is O(n^2), but we can see certain patterns that will be use full.

Let us call a subarray _maximal_, if an extension of it lowers the sum. These maximal subarrays have the following property:
- They are seperate, i.e., they do not overlap. Because if they do, union of those subarrays will be maximal giving a contradiction.
- All maximal subarrays can be calculated in one sweep of the array.

** Haskell

*** Core
:PROPERTIES:
:header-args: :noweb-ref mss-hs
:END:
#+begin_src haskell
mSS :: (Integral a) => Array Int a -> a
mSS a = m' a (max 0 (a!1)) (max 0 (a!1)) 2
  where m' a best curr i | i > snd (bounds a) = best
                         | otherwise = let c = curr + (a!i) in
                             m' a (max c best) (max c 0) (i+1)
#+end_src

#+begin_src haskell
mSSBrute :: (Integral a) => Array Int a -> a
mSSBrute a =
  let (1, n) = bounds a
      sumA x i j = foldl (\acc i -> acc + x!i) 0 [i..j]
  in
    maximum . map (uncurry (sumA a)) $ [(i, j) | i <- [1..n], j <- [1..n]]
#+end_src

*** Test
#+name: test-mss-hs
#+begin_src haskell :noweb strip-export :tangle test-mss.hs
import Data.Array
import Test.QuickCheck

main = quickCheck mSSprop

mSSprop :: [Int] -> Bool
mSSprop [] = True
mSSprop xs = let a = listArray (1, length xs) xs in
               mSS a == max 0 (mSSBrute a)
<<mss-hs>>
#+end_src
